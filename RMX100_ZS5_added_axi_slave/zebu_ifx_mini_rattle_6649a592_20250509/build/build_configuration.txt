######## IP Libraries: ########
# ARCv5EM, v3.5.999999999                /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/ARCV5EM_a9ec96d7/ip_library
# ARC xCAM, v4.3.24                      /global/apps/architect_2025.03/ARChitect/lib/ARC_xCAM.iplib
# ARC_COSIM, v3.2.999999999              /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/ARC_COSIM_6ea659d0/ip_library
# ARC_Soc_Trace, v1.0.999999999          /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/ARC_SOC_TRACE_d03c7280/ip_library
# ARC_Trace, v3.0.999999999              /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/ARC_TRACE_df791d41/ip_library
# ARCv2_ZEBU_RDF, v2.0.999999999         /remote/us01sgnfs00727/arc_fpga/moyanz/git/RDF/arc_rdf_zebu/ARCv2_Zebu/main/dev/ip_library
# ARCv2MSS, v2.1.999999999               /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/ARCV2MSS_bd839c44/ip_library
# ARCV_CCT, v1.1.999999999               /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/CCTRV_0a73081c/ip_library
# Basic_core_modules, v1.1.999999999     /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/BCM_e0ed958e/ip_library
# Implementation, v1.1.14                /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/IMPLEMENTATION_a9ec96d7/ip_library
# safety, v1.1.999999999                 /slowfs/us01dwt2p156/svc-archw-gr/iplibs/rattler_mini_ga/ARC_SAFETY_a9a56107/ip_library
# Tool Configuration, v1.0.108           /u/prjauto/arcartifactory-01/EngArea-Tools/CGEN/1.0.108/tool_configuration_v1.0.108.iplib

######## zebu_ifx_mini_rattle_6649a592_20250509 --- com.arc.templates.project.Empty.1_0 ########

# BuildHTMLDocs --- Creates custom HTML documentation in the 'docs' directory.
-build_html_docs false

# BuildSoftware --- Creates software under the Software directory.
-build_software false

# BuildTestCode --- Creates test source code under the 'tests' directory.
-build_test_code false

# BuildScripts --- Creates synthesis scripts and configuration files, which are required for hierarchy generation.
-build_scripts true

# BuildHDL --- Creates the behavioural and synthesisable HDL source code.
-build_hdl true

# CompileTestCode --- Compiles and assembles the test code.
-compile_test_code false

# GenerateStructuralHDL --- Generate the necessary structural HDL
-generate_structural_hdl true

# CompileForHDLSimulation --- Compile the HDL ready for simulation, using the selected Simulator.
-compile_hdl_for_simulation false

# BuildXCAM --- 
# When true, build the XCAM cycle accurate model from HDL.
# This happens only when the VTOC component (in the XCAM library) has been added to the design.
# 
-build_xcam false

# RunARCsyn --- Synthesize design using ARCsyn
-run_arcsyn false

# RunSEIF --- Run Synopsys Embedit Integrator Flow to generate configured memory instances
-run_seif false

# RunARCrams --- Run ARCrams on the current build, this will stitch in vendor supplied RAM models and update the synthesis and simulation environment to use the models.
-run_arcrams false

# RunARCformal --- Formal Verification using ARCformal
-run_arcformal false

# RunARCpower --- Run the Power Analysis using RTL simulation to derive the activity
-run_arcpower false

# compile_nsim_user_extensions --- Build nSIM extensions for any APEX components in the current design using their C Models.
-compile_nsim_user_extension false

# compile_translated_nsim_extensions --- Converts APEX extensions from Verilog to C++ and compiles the model for nSIM.
-compile_translated_nsim_extensions false


######## System --- com.arc.hardware.System.1_0 ########

# Create System
-create com.arc.hardware.System.1_0 System

# Testbench --- 
# Only the rascal testbench is supported, and is required by ARCtest.
# 	
-testbench rascal

# SynthesisLevel --- 
# Sets the top level module name for synthesis.  
# 
# If not using core_sys: for single-core designs, cpu_isle is used; for multicore designs, archipelago is used.
# 	
-synthesislevel cpu_isle/archipelago

# GateLevelSim --- When selected the gate level sim test code and scripts would be installed to run ARCgatesim
-gatesim true

# UserLibraryName --- The name for your HDL library
-library_name user

# OPTION_SimulatorName --- The name of the simulator you wish to use
-simulator vcs

# sim64 --- When selected, the 64-bit version of the simulator is used.  Be sure you have the 64-bit-capable simulator installed  and $ARCHITECT_ROOT/lib/linux_x86_64/ added to your LD_LIBRARY_PATH.
# The setting of this option affects the content of the generated makefile_interface_*_verilog, where * is the simulator name.
-sim64 false

# verilog_2001 --- Enable Verilog 2001 file-io syntax (if false: use pli)
-verilog_2001 true

# export_srams_to --- Where to place srams, if not cpu_top
-export_srams_to archipelago

# copy_prefix --- 
# A Copy Prefix P causes creation of a separate copy of the entire Verilog build where each Verilog filename, module, and `define is prefixed with P and copied to a separate directory named P.
# 	
-copy_prefix ""


######## ARCRV CCT --- cct.RV.1_0 ########

# Create ARCRV CCT
-create cct.RV.1_0 "System.ARCRV CCT"

# cct --- 
# 	Option used to add a CCT to the design for command-line builds
# 	Without this architect can't add this component to a build
# 	via a cmdline -create command.  
# 	with old scripts.
# 	
-cct true

# no_hostlink --- 
# This prevents the inclusion of the hostlink library (semihosting for ARC-V) when compiling
# C or C++ programs.  The resultant executable, if it contains printfs,
# will print to an internal fixed buffer __mwwrite_buf.  
# Other hostlink operations that require debugger assistance, such as file
# opens, will fail.
# 
# Hostlink references incur memory cycles at unpredictable times and 
# so can perturb cycle-timing results.  Without hostlink,
# the debugger will not in any way interfere with the target while it is running.  
# Therefore this option is useful for simulation in which you want precisely the
# same cycle timing to occur each time you run, or for accurate power consumption results.
# 	
-cct_no_hostlink false


######## ARCV_DM --- com.arc.hardware.ARC_Soc_Trace.ARCV_DM.1_0 ########

# Create ARCV_DM
-create com.arc.hardware.ARC_Soc_Trace.ARCV_DM.1_0 System.ARCV_DM

# dm_dbg_secure --- none: No Security Interface implemented for Debug Module.
#  
# full: Full Security Interface implemented for Debug Module.
#  
# unlock_only: Unlock Security Interface is implemented.
# 
-dm_dbg_secure unlock_only

# dm_system_bus_access --- Adds System Bus Access feature
-dm_system_bus_access false

# dm_dbg_apb_async --- Use Asynchronous Debug APB interface
-dm_dbg_apb_async false

# dm_abc_ibp_if_srcsync --- Use SRCSYNC module on ABC-IBP interface. 0: without src_sync module, 1: with src_sync module
-dm_abc_ibp_if_srcsync false


######## BusFabric --- com.arc.hardware.ARCv2MSS.BusFabric.1_0 ########

# Create BusFabric
-create com.arc.hardware.ARCv2MSS.BusFabric.1_0 System.BusFabric

# alb_mss_fab_def_div2ref --- This specifies the clock division factor at reset. It is used for mss clock controller to generate mss fabric clock, and the value N means mss fabric is running at (1/N) x ref_clk.
-alb_mss_fab_def_div2ref 1

# alb_mss_fab_lat --- This specifies the maximum latency in the master latency units.
-alb_mss_fab_lat 0

# alb_mss_fab_lat_rd --- This specifies the maximum read latency in the master latency units.
-alb_mss_fab_lat_rd 0

# alb_mss_fab_lat_wr --- This specifies the maximum write latency in the master latency units.
-alb_mss_fab_lat_wr 0

# alb_mss_fab_cdc_fifo_en --- This enables CDC FIFO from core clock domain to MSS clock domain.
-alb_mss_fab_cdc_fifo_en false

# alb_mss_fab_def_lat --- This specifies the latency after reset for the master latency units.
-alb_mss_fab_def_lat 0

# alb_mss_fab_def_lat_rd --- This specifies the read latency after reset for the master latency units.
-alb_mss_fab_def_lat_rd 0

# alb_mss_fab_def_lat_wr --- This specifies the write latency after reset for the master latency units.
-alb_mss_fab_def_lat_wr 0

# alb_mss_fab_def_wr_bw --- This specifies the write channel bandwidth parameter after reset for the master bandwidth control units.
-alb_mss_fab_def_wr_bw 0

# alb_mss_fab_def_rd_bw --- This specifies the read channel bandwidth parameter after reset for the master bandwidth control units.
-alb_mss_fab_def_rd_bw 0

# alb_mss_ccm_base --- This specifies the base address at which the ICCM and DCCM DMIs will be placed in the memory map. The address should be divided by 4KB i.e. do not specify the lower 12 bits of the address.
-alb_mss_ccm_base 0x4_0000


######## CPUisle --- com.arc.hardware.EM.CPU_isle.1_0 ########

# Create CPUisle
-create com.arc.hardware.EM.CPU_isle.1_0 System.CPUisle

# unique_name --- verilog module modifier prefix
-unique_name ""

# ArcNum --- The processor number as read back in the ARCNUM field of the IDENTITY register.
-arc_num 0

# instances --- 
# The number of instantiations of this core.
# 
-instances 1

# CPUFloorplan --- Floorplan giving relative placement of the RAMs  for the given configuration of ARCv3HS or ARCv2HS or ARCv2EM in this CPUisle
-cpu_floorplan User

# userCPUFloorplanPath --- Pathname of user floorplan for the CPU when using a hierarchical implementation
-usercpufloorplan_path ""

# pinLocationConstraintsFile --- Pathname+filename of the physical pin location constraints file or just "side1" (all pins on l.h.s) or "side2" (pins on top only) or "side3" (pins on r.h.s. only) or "side4" (pins on bottom only) to get a template file generated
-pin_location_constraints_file ""


######## ARCv5EM --- com.arc.hardware.EM.ARCv5EM.1_0 ########

# Create ARCv5EM
-create com.arc.hardware.EM.ARCv5EM.1_0 System.CPUisle.ARCv5EM

# rnmi_vec_ext --- When this option is set, the RNMI base address is defined by option reset_pc.
-rnmi_vec_ext true

# rnmi_int_vec --- RNMI interrupt base address, 8B aligned. This is N/A when the RNMI base exterbal option is selected
-rnmi_int_vec 0

# mmio_base_ext --- When this option is set, the MMIO base address is defined by external pins.
-mmio_base_ext true

# mmio_base --- MMIO base address[31:20], 1MB aligned. This is N/A when the MMIO base exterbal option is selected
-mmio_base 3584

# dmi_burst_option --- This enables high-throughput burst support on the DMI slave interfaces
-dmi_burst_option false

# mem_bus_option --- The core supports four bus protocols for accessing external memory: AHB5 and AXI5.
-mem_bus_option AHB5

# mem_bus_num --- This specifies the number of memory buses.
-mem_bus_num 1

# per0_bus_option --- The core supports the following bus protocols for accessing the peripheral space, when enabled: AHB5, APB and AXI5.
-per0_bus_option AHB5

# nvm_bus_option --- The core supports the following bus protocols for accessing the NVM space, when enabled: AHB5 and AXI5.
-nvm_bus_option AHB5

# bus_ecc_parity_option --- This option indicates whether ODD parity or EVEN parity will be used for signals on memory bus when safety feature enabled.
-bus_ecc_parity_option Odd

# rmx_isa_profile --- This is the baseline ISA for this core. The mini_profile is based on RV32E, and the default_profile is based on RV32I
-rmx_isa_profile default_profile

# rv_zicsr_option --- This is the RISC-V Zicsr extension for the mini profile
-rv_zicsr_option true

# rv_c_bit_manip_icond_option --- This option configures the following RISC-V extensions: Zce, Zba, Zbb, Zbs, and Zicond
-rv_c_bit_manip_icond_option true

# rv_a_option --- This is the RISC-V A extension
-rv_a_option true

# rv_m_option --- This is the RISC-V M extension
-rv_m_option true

# rv_zfinx_option --- This option includes the single-precision floating point extension, sharing the integer register file.
-rv_zfinx_option false

# rv_zdinx_option --- This option includes the double-precision floating point extension, using the register pairs in integer register file.
-rv_zdinx_option false

# rvv_option --- This is the RISC-V V extension
-rvv_option false

# rv_udsp_option --- This is the propriatary micro-DSP extension
-rv_udsp_option false

# rv_s_option --- Supervisor mode support
-rv_s_option false

# rv_wg_option --- World Guard support
-rv_wg_option true

# wid_mode --- Static built defined WID or dynamic WID.
-wid_mode Dynamic

# wid_num --- Number of worlds
-wid_num 32

# wid_fixed --- WID when wid_mode is static
-wid_fixed 0

# mpy_option --- The Multiplier option allows selection between several multiplier configurations to tradeoff performance with silicon area.
# For select multiply options, when the DIV/REM option is also selected, some datapath resources will be shared between the multiply and divide pipeline to minimize total area.
# 
# <pre>
# 
# mpy_option  div_rem_option  Description
# ----------  --------------  ---------------------
#       
# none	       none            no MPY, no DIV
# 1c	         none or true    1c MPY with optional radix4_enhanced divider
# 2c	         none or true    2c MPY with optional radix4_ennhanced divider
# 10c	       none or true    10c MPY with optional radix2 divider
# </pre>
# 
-mpy_option 10c

# ld_st_queue --- Number of entries of the Load-Store Queue
-ld_st_queue 2

# ld_st_unaligned --- Support Unaligned Load-store accesses
-ld_st_unaligned true

# secded_option --- This option defines the implementation of the ECC SECDED algorithm. Applicable to all memories configured with ECC
-secded_option all_01

# sbe_addr_depth --- Configures recording of SBE address and syndrome depth. One set per memory, single option for all memories
-sbe_addr_depth 1

# halt_on_reset --- This defines whether the core is halted afterreset.
-halt_on_reset true

# soft_reset_option --- Set this option to enable soft-reset. This is a debug feature providing a mechanism to recover from system malfunctioning
-soft_reset_option true

# reset_pc_ext --- Set this option to drive the upper 22 bits [31:10] of the reset PC using the input signal reset_pc_in.
-reset_pc_ext true

# reset_pc --- This sets the upper 32-10 = 22 bits (32-bit core) or 64-11 = 53 bits (64-bit core) of the PC after reset Because this alue is the upper bits, the reset PC is aligned toa 1K-byte (32-bit) or 2K-byte (64-bit) boundary.
-reset_pc 0x0

# logic_bist --- This option will OR LBIST_EN with test_mode
-logic_bist true

# power_domains --- Add power domains and propagates power-gate control signals to the top level. Also generates UPF constraints and commands in the low-power scripts
-power_domains false

# clock_gating --- This enables the insertion of architectural clock gate elements in the design. By enabling this option, the clocks to various parts of the design will be disabled when the logic they drive is not in use to save power.
-clock_gating true

# backdoor_ccm --- Include a backdoor model for CCMs This provides memory access from the debugger without consuming simulation time.  This is presently unavaiable when ECC is enabled on the CCMs.  The backdoor models are disabled `ifdef SYNTHESIS and can also be manually disabled by defining DISABLE_BACKDOOR_CCM when compiling.
-backdoor_ccm false


######## Core Local Interrupt Controller --- com.arc.hardware.EM.Core_Local_Interrupt_Controller.1_0 ########

# Create Core Local Interrupt Controller
-create com.arc.hardware.EM.Core_Local_Interrupt_Controller.1_0 "System.CPUisle.ARCv5EM.Core Local Interrupt Controller"

# small_interrupt --- Small interrupt controller that don't need APLIC
-small_interrupt false

# sfty_irq_dual --- Number of external interrupts as dual-rail
-sfty_irq_dual 0

# rtia_stsp --- Include/exclude ARC-V ISA trap stack pointer extension
-rtia_stsp true

# rtia_snvi --- Include/exclude ARC-V nested vector interrupts extension
-rtia_snvi true

# rtia_smrnmi --- Include/exclude ARC-V resumable NMI
-rtia_smrnmi true

# rtia_hart_major_prio --- Include/exclude major interrupts priority run-time configuration
-rtia_hart_major_prio true

# rtia_hart_major_prio_width --- Number of priority bits for major interrupts
-rtia_hart_major_prio_width 6

# rtia_sswi --- Include/exclude supervisor software interrupt
-rtia_sswi false

# rtia_delivery --- Configure interrupt delivery mechanism supported by the hart to either memory-mapped MSI, Direct MSI or both
-rtia_delivery DMSI

# rtia_imsic_m_mode_file --- Include/exclude machine mode interrupt file
-rtia_imsic_m_mode_file true

# rtia_imsic_m_file_size --- Size of M-mode IMSIC interrupt file
-rtia_imsic_m_file_size 64


######## Core Private Peripheral0 --- com.arc.hardware.EM.Core_Private_Peripheral0.1_0 ########

# Create Core Private Peripheral0
-create com.arc.hardware.EM.Core_Private_Peripheral0.1_0 "System.CPUisle.ARCv5EM.Core Private Peripheral0"

# per0_base --- Sets the base region assignment for DMP Private Peripheral region. Specifies the base address of the peripheral aperture, aligned on a 1MB boundary
-per0_base 3840

# per0_size --- Sets the size of the Peripheral region in 1MB increments
-per0_size 1


######## DCCM --- com.arc.hardware.EM.DCCM.1_0 ########

# Create DCCM
-create com.arc.hardware.EM.DCCM.1_0 System.CPUisle.ARCv5EM.DCCM

# dccm_size --- This defines the size of the Data Closely Coupled Memory (DCCM) in bytes
-dccm_size 1048576

# dccm_base --- Sets the initial memory region assignment for DCCM base address bits [31:20]. Kindly use the decimal value equivalent, when selecting the base
-dccm_base 2048

# dccm_dmi --- This enables external access through a DMI (direct memory interface) port.
-dccm_dmi true

# dccm_ecc_option --- This specifies error checking for on-chip DCCM rams.
# SECDED means single-error correction and double-error detection.
-dccm_ecc_option SECDED_ADDR

# dccm_ecc_init --- DCCM is initialized with zero data at reset, when configured with ECC
-dccm_ecc_init false


######## Debug Interface --- com.arc.hardware.EM.Debug_Interface.1_0 ########

# Create Debug Interface
-create com.arc.hardware.EM.Debug_Interface.1_0 "System.CPUisle.ARCv5EM.Debug Interface"

# num_triggers_t6 --- This is the number of triggers.
-num_triggers_t6 4


######## Hadrware Performance Monitor --- com.arc.hardware.EM.Hardware_Performance_Monitor.1_0 ########

# Create Hadrware Performance Monitor
-create com.arc.hardware.EM.Hardware_Performance_Monitor.1_0 "System.CPUisle.ARCv5EM.Hadrware Performance Monitor"

# hpm_counters --- Number of counters for performance monitoring.
-hpm_counters 8

# hpm_overflow_interrupt --- When a counter overflows, an interrupt is generated.
-hpm_overflow_interrupt true

# hpm_counter_width --- Sets the counter width in bits.
-hpm_counter_width 64


######## ICCM0 --- com.arc.hardware.EM.ICCM0.1_0 ########

# Create ICCM0
-create com.arc.hardware.EM.ICCM0.1_0 System.CPUisle.ARCv5EM.ICCM0

# iccm0_size --- This defines the size of ICCM0 in bytes.
-iccm0_size 524288

# iccm0_base --- Sets the initial memory region assignment. Specifies the 32-bit base address of the ICCM. The base address is aligned on 1MB boundary for ICCM. Kindly use the decimal value equivalent, when selecting the base0
-iccm0_base 0

# iccm0_dmi --- This enables external access through a DMI (direct memory interface) port.
-iccm0_dmi true

# iccm0_ecc_option --- This specifies error checking for on-chip ICCM0
-iccm0_ecc_option SECDED_ADDR

# iccm0_ecc_init --- ICCM is initialized with zero data at reset, when configured with ECC
-iccm0_ecc_init false


######## Instruction Cache --- com.arc.hardware.EM.Instruction_Cache.1_0 ########

# Create Instruction Cache
-create com.arc.hardware.EM.Instruction_Cache.1_0 "System.CPUisle.ARCv5EM.Instruction Cache"

# ic_size --- This defines the total size of the instruction cache in bytes.
-ic_size 16384

# ic_ways --- This defines the number of cache ways
-ic_ways 2

# ic_bsize --- This defines the cache line length in bytes.
-ic_bsize 32

# ic_disable_on_reset --- The instruction cache may be enabled immediately after reset, depending on this option.  If this option is set to true, the instruction cache is disabled and instruction fetches bypass the cache, accessing system memory directly.
-ic_disable_on_reset false

# ic_ecc_option --- This specifies error checking for ICACHE Tag, Data rams.
# SECDED means single-error correction and double-error detection.
-ic_ecc_option SECDED_ADDR


######## PMA --- com.arc.hardware.EM.PMA.1_0 ########

# Create PMA
-create com.arc.hardware.EM.PMA.1_0 System.CPUisle.ARCv5EM.PMA

# pma_entries --- Number of configured PMA entries.
-pma_entries 6


######## PMP --- com.arc.hardware.EM.PMP.1_0 ########

# Create PMP
-create com.arc.hardware.EM.PMP.1_0 System.CPUisle.ARCv5EM.PMP

# pmp_entries --- Number of configured PMP entries.
-pmp_entries 16

# pmp_granularity --- PMP region granularity
-pmp_granularity 32


######## Watchdog Timer --- com.arc.hardware.EM.Watchdog_Timer.1_0 ########

# Create Watchdog Timer
-create com.arc.hardware.EM.Watchdog_Timer.1_0 "System.CPUisle.ARCv5EM.Watchdog Timer"

# watchdog_clk --- Specifies whether the timer should be driven from a separate clock.
-watchdog_clk true

# watchdog_clk_freq --- Specifies the frequency in MHz of the independent asynchronous clock to Watchdog Timer.
-watchdog_clk_freq 20

# watchdog_num --- Select the number of watchdog timers built.
-watchdog_num 1

# watchdog_size --- Specifies the bit width of timer's internal counter.
-watchdog_size 32


######## ClkCtrl --- com.arc.hardware.ARCv2MSS.ClkCtrl.1_0 ########

# Create ClkCtrl
-create com.arc.hardware.ARCv2MSS.ClkCtrl.1_0 System.ClkCtrl

# alb_mss_clkctrl_base_addr --- This specifies the clock controller base address in the memory map, divided by 4KB i.e. do not specify the lower 12 bits of the address.
-alb_mss_clkctrl_base_addr 0xc_0000

# alb_mss_clkctrl_bypass_mode --- If true then all clock dividers/gaters in the clock controller are bypassed, clock ratio is not supported and the division options/registers are overriden
-alb_mss_clkctrl_bypass_mode false


######## DW_DBP --- com.arc.hardware.DW_DBP.1_0 ########

# Create DW_DBP
-create com.arc.hardware.DW_DBP.1_0 System.DW_DBP

# jtag_interface --- Set this option to true for jtag debug interface,set to false for bvci interface
-jtag_interface true

# dbp_jtag_ap --- Enables/configures the JTAG-AP
-dbp_jtag_ap true

# num_apb_ap --- Sets the Number of APB Access Ports to be enabled.
-num_apb_ap 1

# dbp_apb_ap_async --- Use Asynchronous APB interface. 0: Use core/cluster clock, 1: Use dedicated PCLKDBG clock
-dbp_apb_ap_async false

# num_axi_ap --- Sets the Number of AXI Access Ports to be enabled.
-num_axi_ap 1

# num_apb_client0 --- Number of Clients for each APB AP.
-num_apb_client0 1


######## DummySLV --- com.arc.hardware.ARCv2MSS.DummySLV.1_0 ########

# Create DummySLV
-create com.arc.hardware.ARCv2MSS.DummySLV.1_0 System.DummySLV

# alb_mss_dummy_slave_num --- This specifies the number of dummy slaves.
-alb_mss_dummy_slave_num 2

# alb_mss_dummy_slave1_base_addr --- This specifies the base address of dummy slave 1 in the memory map, divided by 4KB i.e. do not specify the lower 12 bits of the address.The base address of dummy slave should be aligned with the size of the dummy slave
-alb_mss_dummy_slave1_base_addr 0xc_0006

# alb_mss_dummy_slave1_size --- This specifies the size of dummy slave 1.
-alb_mss_dummy_slave1_size 4KB

# alb_mss_dummy_slave1_pref --- This specifies the unique prefix of dummy slave 1.
-alb_mss_dummy_slave1_pref dslv1_

# alb_mss_dummy_slave1_prot --- This specifies the protocol of dummy slave 1.
-alb_mss_dummy_slave1_prot APB

# alb_mss_dummy_slave1_dw --- This specifies the data width of dummy slave 1.
-alb_mss_dummy_slave1_dw 32

# alb_mss_dummy_slave1_idw --- This speciries the AXI ID width of the dummy slave port. This option is only valid when it's configured as AXI protocol.
-alb_mss_dummy_slave1_idw 16

# alb_mss_dummy_slave2_base_addr --- This specifies the base address of dummy slave 2 in the memory map, divided by 4KB i.e. do not specify the lower 12 bits of the address.The base address of dummy slave should be aligned with the size of the dummy slave
-alb_mss_dummy_slave2_base_addr 0xc_0106

# alb_mss_dummy_slave2_size --- This specifies the size of dummy slave 2.
-alb_mss_dummy_slave2_size 16MB

# alb_mss_dummy_slave2_pref --- This specifies the unique prefix of dummy slave 2.
-alb_mss_dummy_slave2_pref dslv2_

# alb_mss_dummy_slave2_prot --- This specifies the protocol of dummy slave 2.
-alb_mss_dummy_slave2_prot AXI

# alb_mss_dummy_slave2_dw --- This specifies the data width of dummy slave 2.
-alb_mss_dummy_slave2_dw 64

# alb_mss_dummy_slave2_idw --- This speciries the AXI ID width of the dummy slave port. This option is only valid when it's configured as AXI protocol.
-alb_mss_dummy_slave2_idw 16


######## Implementation --- com.arc.hardware.implementation.1_0 ########

# Create Implementation
-create com.arc.hardware.implementation.1_0 System.Implementation

# ClockSpeed --- Target clock speed of the system
-clock_speed 20

# DDR2_clk_Ratio --- DDR2 Clock Vs System Clock Ratio
# 2x
# 3x
# 4x
-ddr2_clk_ratio 3x

# ClockSkew --- The clock skew for the system
-clock_skew 0.2

# HoldMargin --- Margin for hold time checks
-hold_margin 0.05

# Floorplan --- Floorplan definition for relative placement of  RAMs (at CPU-level) or the placement of the rams and CPU hard cores (at multicore level)
-floorplan User

# JTAGFrequency --- Select the frequency of the JTAG clock Tck (in MHz).
# 
# The JTAG clock speed has to be less than 1/2 of the cpu clock otherwise the signals on the BVCI interface are not guaranteed to be valid.
# 
# NOTE: The RTL simulations will work when the JTAG clock frequency is set to half the CPU clock, however this may not be the case when simulating at gate level due to delays on the IO pads.
# 
# The default is set to 10 MHz so that there is no conflict when simulating with an ARCangel3 at 30MHz. (30 > 10*2)
# 
# The speed of simulation can be greatly increased by using a faster JTAG clock, but a dependency will warn if it exceeds 1/2 of the cpu clock.
# 
-jtag_tclk 10

# execution_trace_level --- 
# This traces committed instructions as they execute, and gathers statistics
# visible in the debugger for counting instructions & cycle delays.
# At the "stats" level ony the statistics are gathered and no trace is printed.
# "file" is equivalent to "full", but the results go to a trace .txt file instead.
# 
-execution_trace_level stats

# unique_clk --- 
# Have unique clock for each core included in system.
# 
-unique_clk true

# generate_ipxact --- 
# Generate ipxact.xml file describing the CPUisle or archipelago frontier
# 
-generate_ipxact true

# ipxact_include_aux_regs --- 
# Include aux register descriptions in the generated ipxact.
# 
-ipxact_include_aux_regs true

# ipxact_relative_path_names --- 
# Use relative path names for Verilog files in the ipxact.
# Otherwise, absolute path names are used.
# 
-ipxact_relative_path_names true


######## Profiler --- com.arc.hardware.ARCv2MSS.Profiler.1_0 ########

# Create Profiler
-create com.arc.hardware.ARCv2MSS.Profiler.1_0 System.Profiler

# alb_mss_perfctrl_base_addr --- This specifies the profiler base address in the memory map, divided by 4KB i.e. do not specify the lower 12 bits of the address.
-alb_mss_perfctrl_base_addr 0xc_0002

# alb_mss_perfctrl_tie_signal_control --- This specifies whether to control tied signals.
-alb_mss_perfctrl_tie_signal_control false

# alb_mss_perfctrl_signal_monitor_num --- This specifies the number of monitor to output signal
-alb_mss_perfctrl_signal_monitor_num 1


######## SRAMCtrl --- com.arc.hardware.ARCv2MSS.SRAMCtrl.1_0 ########

# Create SRAMCtrl
-create com.arc.hardware.ARCv2MSS.SRAMCtrl.1_0 System.SRAMCtrl

# alb_mss_mem_region_num --- The number of regions supported in SRAMCtrl component
-alb_mss_mem_region_num 1

# alb_mss_mem0_base_addr --- This specifies the base address of memory region 0 in the memory map, divided by 4KB i.e. do no specify the lower 12 bits of the address.
-alb_mss_mem0_base_addr 0

# alb_mss_mem0_size --- This specifies the memory size of memory region 0.
-alb_mss_mem0_size 2GB

# alb_mss_mem0_attr --- This specifies the memory access attribute of memory region 0.
-alb_mss_mem0_attr Read-Write

# alb_mss_mem0_secure --- This specifies the memory secure attribute of memory region 0.
-alb_mss_mem0_secure Non-Secure

# alb_mss_mem0_lat --- This specifies the maximum latency of memory region 0 .
-alb_mss_mem0_lat 1024

# alb_mss_mem0_def_lat --- This specifies the latency after reset of memory region 0.
-alb_mss_mem0_def_lat 0

# alb_mss_mem0_lat_rd --- This specifies the maximum read latency of memory region 0 .
-alb_mss_mem0_lat_rd 0

# alb_mss_mem0_def_lat_rd --- This specifies the read latency after reset of memory region 0.
-alb_mss_mem0_def_lat_rd 0

# alb_mss_mem0_lat_wr --- This specifies the maximum write latency of memory region 0 .
-alb_mss_mem0_lat_wr 0

# alb_mss_mem0_def_lat_wr --- This specifies the write latency after reset of memory region 0.
-alb_mss_mem0_def_lat_wr 0

# alb_mss_mem1_def_lat --- This specifies the latency after reset of memory region 1.
-alb_mss_mem1_def_lat 0

# alb_mss_mem2_def_lat --- This specifies the latency after reset of memory region 2.
-alb_mss_mem2_def_lat 0

# alb_mss_mem3_def_lat --- This specifies the latency after reset of memory region 3.
-alb_mss_mem3_def_lat 0

# alb_mss_mem_is_default_slave --- If true then all transactions without destination will be routed here.
-alb_mss_mem_is_default_slave true

# alb_mss_mem_default_space --- This specifies the memory space width of the system.
-alb_mss_mem_default_space 32

# alb_mss_mem_data_width --- This specifies the memory data width
-alb_mss_mem_data_width 128


######## Safety Manager --- com.arc.hardware.RV.Safety_Manager.1_0 ########

# Create Safety Manager
-create com.arc.hardware.RV.Safety_Manager.1_0 "System.Safety Manager"

# cpu_safety --- 0: ASIL-D, CPU will be protected by DCLS
# 1: ASIL-B, CPU will be protected by Partial DCLS and End to End ECC
# 2: Hybrid Mode, CPU can switch between ASIL-D and QM mode during reset
# 3: Hybrid Mode, CPU can switch between ASIL-D and ASIL-B mode during reset
-cpu_safety 0

# safety_delay --- Specifies the number of delay stages for Time Diversity of core
-safety_delay 0

# hw_error_injection --- When configured this option will enable hardware error injection on safety mechanisms in diagnostic mode. This option includes error injection on Comparators, safety monitor aggregation logic .etc
-hw_error_injection true

# reg_comparands --- Register signals from main & shadow before comparing.
-reg_comparands false


######## Tool Configuration --- cgen.1_0 ########

# Create Tool Configuration
-create cgen.1_0 "System.Tool Configuration"

# mwdt_version --- Selects the MetaWare version to be used with the TCF file.
# Change from the "default" setting to an older or newer toolset version if you want the TCF file to be used with an older or newer version of the MetaWare tools.
-mwdt_version default

# code_base_addr --- 
# The base address to assign to the executable code segment in the linker command file when there is no ICCM in the build.  If not set here, the value 0 or the location of the interrupt vectors may be used as a default.
# 
-code_base_addr 0xffffffff

# data_base_addr --- 
# The base address to assign to the data segment in the linker command file when the data is not being mapped to a DCCM.  This value is ignored when the data segment is mapped to a DCCM, as in that case the base address of the DCCM memory is used.
# 
# A value of 0xffffffff means that the data segment will not be mapped to any specific address.
# 
-data_base_addr 0xffffffff

# ucdata_base_addr --- 
# The base address to assign to the .ucdata section used to contain data designated _Uncached.  The region must not overlap the address ranges where code and data will be mapped in the TCF linker command file.
# 
-ucdata_base_addr 0xffffffff

# ucdata_mem_size --- 
# The size of the memory region to reserve for the .ucdata section
# 
-ucdata_mem_size 0

# underscores_in_numbers --- Use underscores in hex numbers to improve readability.
-underscores_in_numbers false

# lcf_ccm_fill --- Linker command file fills CCM data memory for use with -Bzerobss
-lcf_ccm_fill true

# tcf_rebrand_name --- Alternate branding name for TCF (not used)
-rebrand_name ""


######## ZEBU_AXI_XTOR --- com.arc.hardware.ARCv2_ZEBU_RDF.ZEBU_AXI_XTOR.1_0 ########

# Create ZEBU_AXI_XTOR
-create com.arc.hardware.ARCv2_ZEBU_RDF.ZEBU_AXI_XTOR.1_0 System.ZEBU_AXI_XTOR

# zebu_has_axi_xtor_gpio --- Description to follow
-zebu_has_axi_xtor_gpio false


######## ZEBU_BOX --- com.arc.hardware.ARCv2_ZEBU_RDF.ZEBU_BOX.1_0 ########

# Create ZEBU_BOX
-create com.arc.hardware.ARCv2_ZEBU_RDF.ZEBU_BOX.1_0 System.ZEBU_BOX

# zebu_version --- Model of ZeBu Server where generated bitstream will run
-zebu_version ZS5

# architecture_file_path --- Path to architecture_file (zse_configuration.tcl) of target ZeBu Server
-architecture_file_path ""


