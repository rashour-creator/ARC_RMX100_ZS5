// Library ARC_Soc_Trace-1.0.999999999
//----------------------------------------------------------------------------
//
// Copyright (C) 2010-2013 Synopsys, Inc. All rights reserved.
//
/// SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary 
// work of Synopsys, Inc., and is fully protected under copyright and 
// trade secret laws. You may not view, use, disclose, copy, or distribute 
// this file or any information contained herein except pursuant to a 
// valid written license from Synopsys, Inc.
//
// Certain materials incorporated herein are copyright (C) 2010 - 2011, The
// University Court of the University of Edinburgh. All Rights Reserved.
//
// The entire notice above must be reproduced on all authorized copies.
//
//----------------------------------------------------------------------------
//
// Description:
//
// JTAG communications interface.
//
// This is the overall structural code for the JTAG port. Note that it contains
// two clock domains: the JTAG clock domain and the ungated core clock
// domain.
// The tap_controller and debug_port modules run off of the JTAG clock, and the
// sys_clk_sync and hif2bt modules run off of the core clock. The
// synchronization philosophy is that all the signals generated by the BVCI
// initiator are generated on JTAG clock. Then a request is made to
// sys_clk_sync, which synchronizes the request to the core clock and
// generates cmdval. All the other signals are thus guaranteed to be stable long
// before they can be latched by the BVCI target. Once this request is
// generated, the logic on the JTAG clock *assumes* that the transaction will
// complete, and in the case of a read the data will be returned, within
// a single cycle of the JTAG clock. Since the synchronization of the request
// takes two core clocks, the BVCI transaction takes one core clock, and the
// setup of the returning data into the receiving flip-flops takes one core
// clock, the period of the JTAG clock must be at least two times that of the
// core clock. Note that if a fabric is interposed between the BVCI initiator
// and target, the latency of that fabric must be added to this time. JTAG
// communications interface.
//
// Connection to a Boundary Scan Register (scan chain) will involve decoding
// eight signals called:
//
//       jtag_bsr_tdo,
//       jtag_extest_mode,
//       jtag_sample_mode,
//       capturedr_en,
//       shiftdr_en,
//       updatedr_en,
//       jtag_tdi.
//
// The jtag_tdi is connected to the first cell in the Boundary Scan Register.
// The jtag_bsr_tdo pin is wired to the final cell of the Boundary Scan
// Register. The jtag_extest_mode and jtag_sample_mode signals are used as
// master enables. This allow the Boundary Scan Register to be activated
// whenever the EXTEST or SAMPLE instruction is selected.
// The shiftdr_en, capturedr_en and updatedr_en enable signals are combined
// with decoding logic allowing the shift and latch elements of the Boundary
// Scan Register to be controlled in the Shift-DR, Capture-DR and Update-DR
// TAP states.
//
//--------------------------------------------------------------------

`include "dw_dbp_defines.v"

// Set simulation timescale
module dwt_jtag_port(
  input                       clk,
  input                       jtag_tck,
  input                       jtag_tck_inv,
  input                       jtag_trst_n,
  input                       tckRiseEn,
  input                       rst_a,
  input                       jtag_tdi,
  input                       jtag_tms,
                                     
  output                      jtag_tdo,
  output                      jtag_tdo_zen_n,
                                     
  output [31:0]               dbg_address,
  output [3:0]                dbg_be,
  output [1:0]                dbg_cmd,
  output                      dbg_cmdval,
  output                      dbg_daddrval,
  output                      dbg_eop,
  output                      dbg_rspack,
  output [31:0]               dbg_wdata,
// leda NTL_CON13C off
// leda NTL_CON37 off
// LMD: non driving port
// LJ:  standard debug interface
// spyglass disable_block W240
// SMD: Input declared but not read
// SJ:  standard debug interface
  input [31:0]                dbg_rdata,
  input                       dbg_reop,
  input                       dbg_rspval,
  input                       dbg_rerr
// spyglass enable_block W240
// leda NTL_CON13C on
// leda NTL_CON37 on
  );                                 

wire                        i_test_logic_reset;
wire                        i_run_test_idle;
wire                        i_shift_ir;
wire                        i_update_ir;
wire                        shiftdr_en;
wire                        capturedr_en;
wire                        i_capture_ir;
wire                        i_select_r;
wire                        i_test_logic_reset_nxt;
wire                        i_run_test_idle_nxt;
wire                        i_select_dr_scan_nxt;
wire                        capturedr_en_nxt;
wire                        updatedr_en_nxt;
wire                        update_dr;

wire                        i_do_transf;
wire [32:0]                 i_stg_addr;
wire [32:0]                 i_stg_data;
wire [4:0]                  i_stg_cmd;
wire [32:0]                 i_stg_select_in;
wire [6:0]                  i_transf_status;
wire                        i_transf_status_oksend_sync_tck;
wire                        i_do_bvci_cycle;
wire [31:0]                 i_bvci_daddr;
wire                        i_bvci_daddr_val;
wire [`DWT_V_DTI_ABITS-1:0] i_btx_addr_r;
wire                        i_btx_op_r_val;
wire                        i_bvci_daddr_btxop_r_val;
wire [5:2]                  i_bvci_addr;
wire [1:0]                  i_bvci_cmd;
  
wire                        i_dbg_rspval_toggle_sync_tck;
wire [31:0]                 dbg_rdata_sync_tck;
wire [31:0]                 dbg_wdata_tck;

dwt_debug_port u_alb_debug_port (
  .jtag_trst_n                (jtag_trst_n),
  .jtag_tck_inv               (jtag_tck_inv),
  
  .jtag_tck                   (jtag_tck),
  .jtag_tdi                   (jtag_tdi),
  .jtag_tdo_r                 (jtag_tdo),
  
  .test_logic_reset           (i_test_logic_reset),
  .run_test_idle              (i_run_test_idle),
  .shift_ir                   (i_shift_ir),
  .update_dr                  (update_dr),
  .update_ir                  (i_update_ir),
  .shift_dr                   (shiftdr_en),
  .capture_dr                 (capturedr_en),
  .capture_ir                 (i_capture_ir),
  .select_r                   (i_select_r),
  .test_logic_reset_nxt       (i_test_logic_reset_nxt),
  .run_test_idle_nxt          (i_run_test_idle_nxt),
  .select_dr_scan_nxt         (i_select_dr_scan_nxt),
  .capture_dr_nxt             (capturedr_en_nxt),
  .update_dr_nxt              (updatedr_en_nxt),
  
  .bvci_addr_r                (i_bvci_addr),
  .bvci_cmd                   (i_bvci_cmd),
  
  .bvci_daddr_r               (i_bvci_daddr),  // direct bvci access addresss
  .bvci_daddr_r_val           (i_bvci_daddr_val),  //direct bvci access addresss valid
  .btx_addr_r                 (i_btx_addr_r),   
  .btx_op_r_val               (i_btx_op_r_val),
  .bvci_daddr_btxop_r_val     (i_bvci_daddr_btxop_r_val),

  .dbg_rdata_sync_tck         (dbg_rdata_sync_tck),
  .dbg_rspval_toggle_sync_tck (i_dbg_rspval_toggle_sync_tck),
  .dbg_be                     (dbg_be),
  .dbg_rspack                 (dbg_rspack),
  .dbg_eop                    (dbg_eop),
  .dbg_wdata                  (dbg_wdata_tck),
  .do_bvci_cycle              (i_do_bvci_cycle),
  .do_transf                  (i_do_transf),
  .stg_addr                   (i_stg_addr),
  .stg_data                   (i_stg_data),
  .stg_cmd                    (i_stg_cmd),
  .stg_select_in              (i_stg_select_in),
  .transf_status              (i_transf_status),
  .transf_status_oksend_sync_tck (i_transf_status_oksend_sync_tck)
  );
  
dwt_sys_clk_sync u_alb_sys_clk_sync (
  .clk                        (clk),
  .rst_a                      (rst_a),
  .jtag_trst_n                (jtag_trst_n),
  .jtag_tck                   (jtag_tck),
  .tckRiseEn                  (tckRiseEn),
  .do_transf                  (i_do_transf),
  .stg_addr                   (i_stg_addr),
  .stg_data                   (i_stg_data),
  .stg_cmd                    (i_stg_cmd),
  .stg_select_in              (i_stg_select_in),
  .transf_status              (i_transf_status),
  .transf_status_oksend_sync_tck (i_transf_status_oksend_sync_tck),
  .do_bvci_cycle              (i_do_bvci_cycle),
// spyglass disable_block Ac_cdc08
// SMD: Reports control bus clock domain crossings
// SJ: CDC accross pseudo-bvci interface handled by protocol/clk ratio
  .bvci_addr_r                (i_bvci_addr),
  .bvci_cmd_r                 (i_bvci_cmd),
  .bvci_daddr_r               (i_bvci_daddr),  // direct bvci access addresss
  .bvci_daddr_r_val           (i_bvci_daddr_val),  //direct bvci access addresss valid
  .btx_addr_r                 (i_btx_addr_r),   
  .btx_op_r_val               (i_btx_op_r_val),
  .bvci_daddr_btxop_r_val     (i_bvci_daddr_btxop_r_val),
  .dbg_daddrval               (dbg_daddrval),
  .dbg_rspval                 (dbg_rspval),
  .dbg_rdata                  (dbg_rdata),
  .dbg_rspval_toggle_sync_tck (i_dbg_rspval_toggle_sync_tck),
  .dbg_rdata_sync_tck         (dbg_rdata_sync_tck),
// spyglass enable_block Ac_cdc08
  
  .dbg_wdata_tck              (dbg_wdata_tck),
  .dbg_wdata                  (dbg_wdata),
  .dbg_address                (dbg_address),
  .dbg_cmd                    (dbg_cmd),
  .dbg_cmdval                 (dbg_cmdval)
  );
  
dwt_tap_controller u_alb_tap_controller (
  .jtag_tck                   (jtag_tck),
  .jtag_trst_n                (jtag_trst_n),
  .jtag_tck_inv               (jtag_tck_inv),
  .jtag_tms                   (jtag_tms),
  .select_r                   (i_select_r),
  .jtag_tdo_zen_n             (jtag_tdo_zen_n),
  .test_logic_reset           (i_test_logic_reset),
  .run_test_idle              (i_run_test_idle),
  .shift_ir                   (i_shift_ir),
  .update_ir                  (i_update_ir),
  .shift_dr                   (shiftdr_en),
  .capture_dr                 (capturedr_en),
  .capture_ir                 (i_capture_ir),
  .update_dr                  (update_dr),
  .test_logic_reset_nxt       (i_test_logic_reset_nxt),
  .run_test_idle_nxt          (i_run_test_idle_nxt),
  .select_dr_scan_nxt         (i_select_dr_scan_nxt),
  .capture_dr_nxt             (capturedr_en_nxt),
  .update_dr_nxt              (updatedr_en_nxt)
  );
  
endmodule // module dwt_jtag_port
